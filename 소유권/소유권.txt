Rust는 변수나 태스크에 국한된 가비지 컬렉터에 대한 객체의 생명주기의 관리를 위임하는 객체 소유권의 개념을 형식화한다. 객체의 소유자는 소멸자를 호출하여 객체의 생명주기를 관리하고, 객체가 변할 수 있는지 판단할 책임이 있다.

소유권은 재귀적이기 때문에, 변화성은 재귀적으로 상속되고 소멸자는 소유된 객체 트리가 가지고 있는 것들을 파괴한다. 변수는 최상위 소유자이고 포함된 객체가 스코프를 벗어낫을 때 파괴된다. 가비지 컬렉터에 의해 관리되는 박스는 새로운 소유권 트리를 시작하고, 소멸자는 수집될 때 호출된다.

// 구조체는 `x`와 `y` 필드에 포함된 객체를 소유한다.
struct Foo { x: int, y: ~int }

{
    // `a`는 구조체의 소유자이고, 그래서 구조체의 필드의 소유자이다.
    let a = Foo { x: 5, y: ~10 };
}
// `a`가 스코프를 벗어나면, 구조체 필드의 `~int` 소멸자가 호출된다.

// `b`는 값이 변경될 수 있고, 값의 변경성은 객체의 소유권에 따라 상속된다.
let mut b = Foo { x: 5, y: ~10 };
b.x = 10;
객체가 쓰레기가 수집된 박스를 가지지 않으면, 객체는 하나의 소유권 트리로 구성되고 태스크 사이로 전달되는 것을 허용하는 Owned 특징이 주어진다. 맞춤 소멸자는 Owned 타입에만 직접적으로 구현될 수 있으나, 쓰레기 수집된 박스는 맞춤 소멸자를 갖는 타입을 여전히 포함할 수 있다.