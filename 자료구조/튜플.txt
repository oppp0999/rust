Rust에서 튜플은 필드가 이름을 갖지 않는 것만 제외하면 정확히 구조체처럼 행동한다. 그래서, 점 표기로 필드에 접근할 수 없다. 튜플은 0을 제외한 어떤 숫자라도 인자로 받을 수 있다. (n개를 생각하더라도, 원한다면 빈 튜플 ()로도 만들 수 있다).

let mytup: (int, int, float) = (10, 20, 30.0);
match mytup {
  (a, b, c) => info!(a + b + (c as int))
}
5.4 튜플 구조체
또한 Rust는 구조체와 튜플로 행동하는 tuple structs를 가진다, except that, 튜플과 다르게, 튜플 구조체는 이름을 가지고(그래서 Foo(1, 2)는 Bar(1, 2)와 서로 다른 타입이다.), 튜플 구조체의 필드는 이름을 가지지 않는다.

struct MyTup(int, int, float);
let mytup: MyTup = MyTup(10, 20, 30.0);
match mytup {
  MyTup(a, b, c) => info!(a + b + (c as int))
}

때때로 "newtypes"라고 불리는 하나의 필드를 가지는 튜플 구조체를 위한 특수한 경우가 있다. (Haskell의 "newtype" 기능에서 영향을 받음). 새로운 이름은 기존 타입의 동의어뿐만 아니라 오히려 자신의 독특한 타입을 가지는 방식으로 새로운 타입을 정의하곤 했다.

struct GizmoId(int);
편의상, 역참조 (*) 단항 연산자를 이용해 구조체의 내용을 추출할 수 있다.

let my_gizmo_id: GizmoId = GizmoId(10);
let id_int: int = *my_gizmo_id;
이와같은 타입은 동일한 타입을 가지는 데이터 사이를 구분하기 유용할 수 있지만, 다른 방법이 사용되어야 한다.

struct Inches(int);
struct Centimeters(int);
위의 정의는 프로그램에서 다른 단위에 해당하는 혼란스러운 숫자를 피하도록 허용하는 단순한 방법이다.

