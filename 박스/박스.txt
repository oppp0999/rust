기본적으로 많은 현대의 언어들은 값을 힙 메모리를 가리키는 포인터로 나타낸다. 대조적으로, Rust는 C와 C++처럼 직접적으로 해당 타입을 나타낸다. 달리 말하자면 Rust에서 데이터를 모으는 것은 unboxed라고 한다. 이는 let x = Point { x: 1f, y: 1f };라고 하면, 스택상에 구조체를 생성함을 뜻한다. 자료 구조로 복사한다면, 포인터가 아닌 구조체 전체를 복사한다.

일반적으로 Point와 같은 작은 구조체에서는 메모리에 할당하는 것과 포인터를 통해 간접적으로 가리키는것 보다 더 호율적이다. 그러나 큰 구조체나 변경될 수 있는 상태에서는, 스택이나 힙 상에서 단일 복사하고, 포인터를 통해 가리키는 것이 유용할 수 있다.

9.1 소유된 박스
소유된 박스(~)는 힙 상에서 유일하게 소유된 할당이다. 박스가 없으면 변경가능성과 소유자의 생명주기를 상속받는다.

let x = 5; // 변경 불가능
let mut y = 5; // 변경 가능
y += 2;

let x = ~5; // 변경 불가능
let mut y = ~5; // 변경 가능
*y += 2; // * 연산자는 가지고 있는 값에 접근하기 위해 필요하다.
소유된 박스의 목적은 재귀적인 자료 구조를 생성하거나 포인터보다 더 큰 객체를 싸게 전달하기 위해 간접 층을 추가하는 것이다. 소유된 box는 유일한 소유주를 갖기 때문에, 트리 자료 구조로만 나타내어질 수 있다.

다음의 구조체는 컴파일되지 않을것이다. 왜냐하면 간접의 누락은 구조체가 무한 크기를 갖는다는 것을 의미할 것이기 때문이다.

struct Foo {
    child: Option<Foo>
}
노트: Option 타입은 선택적 값을 나타내는 열거형이다. 이는 많은 다른 언어에서의 null이 가능한 포인터와 비교되지만, contained value unboxed 를 저장한다.

간접이 포함된 소유된 포인터는 힙 상에서 구조체의 외부에 자식을 할당한다, which 유한한 크기를 가지고 컴파일 타임에 오류가 발생하지 않는:

struct Foo {
    child: Option<~Foo>
}
9.2 관리되는 박스
관리되는 박스(@)는 태스크 로컬 쓰레기 수집기에 의해 관리되는 생명주기를 포함한 힙 할당이다. 태스크가 끝나기 전에 박스로 남은 참조가 없으면 어떤 포인터는 소멸될 것이다. 관리되는 박스는 소유자가 없고, 그래서 새로운 소유권 트리를 시작하고 변경가능성을 상속하지 않는다. 관리되는 박스는 포함된 객체를 소유하고, 변경가능성은 관리되는 박스(@ 또는 @mut)의 타입에 의해 정의된다. 관리되는 박스에 포함된 객체는 Owned가 아니고, 태스크 간에 전송될 수 없다.

let a = @5; // 변경 불가

let mut b = @5; // 변경 가능한 변수, 변경 불가능한 박스
b = @10;

let c = @mut 5; // 변경 불가능한 변수, 변경 가능한 박스
*c = 10;

let mut d = @mut 5; // 변경 가능한 변수, 변경 가능한 박스
*d += 5;
d = @mut 15;
변경가능한 변수와 변경불가능한 변수는 타입이 호환된다면 같은 박스를 가리킬 수 있다. 박스의 변경가능성은 그 타입의 속성이지만, 가변의 핸들 예제에서 불변의 박스가 가변의 박스로의 참조는 할당될 수 없다.

let a = @1;     // 불변 박스
let b = @mut 2; // 가변 박스

let mut c : @int;       // declare a variable with type managed immutable int
let mut d : @mut int;   // and one of type managed mutable int

c = a;          // box type is the same, okay
d = b;          // box type is the same, okay
// but b cannot be assigned to c, or a to d
c = b;          // error