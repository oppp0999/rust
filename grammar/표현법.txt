모든 코드에서 외관상 다르더라도, Rust의 문법과 C와 같은 predecessors 사이에는 근본적인 차이가 있다. C에서 문장인 많은 구조들은 Rust에서는 더 간결한 코드를 허용하는 표현식이다. 예를 들어, 다음과 같은 코드의 일부분을 작성할 수 있다.

let price;
if item == "salad" {
    price = 3.50;
} else if item == "muffin" {
    price = 2.25;
} else {
    price = 2.00;
}
그러나, Rust에서는, price라는 이름을 반복할 필요가 없다.

let price =
    if item == "salad" {
        3.50
    } else if item == "muffin" {
        2.25
    } else {
        2.00
    };
두 코드의 일부분은 정확히 동일하다. 둘다 주어진 조건에 따라 값을 price에 할당한다. 두번째 코드 조각의 블록안에 세미콜론이 없다는 것을 명심해라. 이것은 중요하다. 중괄호 사이의 블록내의 마지막 문장 뒤에 세미콜론의 누락은 전체 블록에게 마지막 표현식의 값을 준다.

다르게 말하면, Rust에서 세미콜론은 표현식의 값을 무시한다. 그래서 if의 분기가 { 4; }처럼 되어있다면, 위의 예제는 단순히 price에 () (nil 또는 void)를 할당할 것이다. 그러나 세미콜론이 없으면, 각 분기는 서로 다른 값을 가지고, price는 분기에서 얻은 값을 가진다.

즉, 선언(변수를 위한 let, 함수를 위한 fn, 그리고 traits, enum types, 그리고 정적 아이템)은 표현식이고, 함수 몸체에 포함된다.

fn is_four(x: int) -> bool {
   // No need for a return statement. The result of the expression
   // is used as the return value.
   x == 4
}