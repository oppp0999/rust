우리는 이미 몇가지 함수 정의를 보았다. type과 같이 다른 모든 정적인 선언처럼, 함수는 최상위와 다른 함수 내부 (또는 모듈 내부, 뒤에서 살펴볼 것임)에서 선언될 수 있다. fn 키워드는 함수를 뜻한다. 함수는 괄호 안에 쉼표로 구분된 expr: type 쌍의 인자 목록을 가진다. 화살표 ->는 인자 목록과 함수의 반환 타입을 구분한다.

fn line(a: int, b: int, x: int) -> int {
    return a * x + b;
}
return 키워드는 함수의 몸통에서 즉시 반환한다. 선택적으로 반환하기 위한 표현식이 따라온다. 함수는 표현식을 생성하는 함수의 최상위 블록을 가짐으로써 값을 반환할 수 있다.

fn line(a: int, b: int, x: int) -> int {
    a * x + b
}
반환값을 적기위한 방식으로는 명식적으로 return이라고 적는 것보다 Rust 스타일이 더 낫다. return은 함수에서 일찍 반환할때 활용된다. 값을 반환하지 않는 함수는 nil ()이 반환된다고 하고, 반환 타입과 반환 값 둘다 정의에서 생략될 수 있다. 다음의 두 함수는 동일하다.

fn do_nothing_the_hard_way() -> () { return (); }

fn do_nothing_the_easy_way() { }
함수의 끝에 있는 세미콜론은 ()을 반환하는 것과 같다.

fn line(a: int, b: int, x: int) -> int { a * x + b  }
fn oops(a: int, b: int, x: int) -> ()  { a * x + b; }

assert!(8 == line(5, 3, 1));
assert!(() == oops(5, 3, 1));
match 표현식과 let 바인딩으로, 함수 인자는 구조파괴 패턴을 지원한다. 튜플로부터 처음 값을 풀고 반환하는 이 예제를 보면 let처럼, 인자 패턴은 반박될 수 없다.

fn first((value, _): (int, float)) -> int { value }